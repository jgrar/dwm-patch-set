diff --git a/config.h b/config.h
new file mode 100644
index 0000000..30a7308
--- /dev/null
+++ b/config.h
@@ -0,0 +1,151 @@
+/* See LICENSE file for copyright and license details. */
+
+/* appearance */
+static const char *fonts[] = {
+	"Inconsolata:size=8",
+	"Siji:size=8"
+};
+static const char dmenufont[]       = "monospace:size=10";
+#define NUMCOLORS         3
+static const char colors[NUMCOLORS][MAXCOLORS][8] = {
+//	  border     foreground background
+	{ "#696969", "#696969", "#262626" },  // normal
+	{ "#696969", "#e0e0e0", "#262626" },  // selected
+	{ "#696969", "#ce5c00", "#262626" },  // urgent
+	// add more here
+};
+static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int snap      = 32;       /* snap pixel */
+static const int showbar            = 1;        /* 0 means no bar */
+static const int topbar             = 1;        /* 0 means bottom bar */
+
+/* tagging */
+static const char *tags[] = { "I", "II", "III", "IV", "V" };
+
+static const Rule rules[] = {
+	/* xprop(1):
+	 *	WM_CLASS(STRING) = instance, class
+	 *	WM_NAME(STRING) = title
+	 */
+	/* class      instance    title       tags mask     isfloating   ismax        monitor */
+	{ "URxvt",    "mindlock", NULL,       0,            1,           1,           -1 },
+	{ "Gimp",     NULL,       NULL,       0,            1,           0,           -1 },
+	{ "Firefox",  NULL,       NULL,       1 << 4,       0,           0,           -1 },
+};
+
+/* layout(s) */
+static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const int nmaster     = 1;    /* number of clients in master area */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
+
+static const Layout layouts[] = {
+	/* symbol     arrange function */
+	{ "><>",      NULL },    /* no layout function means floating behavior */
+	{ "[]=",      tile },    /* first entry is default */
+	{ "[M]",      monocle },
+};
+
+/* key definitions */
+#define MODKEY Mod1Mask
+#define TAGKEYS(KEY,TAG) \
+	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+
+/* helper for spawning shell commands in the pre dwm-5.0 fashion */
+#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
+
+/* commands */
+#define TERM "urxvtc"
+static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", colors[0][2], "-nf", colors[0][1], "-sb", colors[1][2], "-sf", colors[1][1], NULL };
+static const char *termcmd[]  = { TERM, NULL };
+
+#include "maximize.c"
+
+#include "runorraise.c"
+
+#define RUNORRAISE(KEY, NAME, CLASS, SPAWN) \
+	{ MODKEY|ShiftMask, KEY, runorraise, \
+		{.v = &(RoR){ \
+			.name = NAME, \
+			.class = CLASS, \
+			.spawn = (char **)SPAWN \
+		}} \
+	}
+
+#define TERMSPAWN(NAME, ...) \
+	{ TERM, "-name", NAME, "-e", __VA_ARGS__, NULL }
+
+static const char *mindlockcmd[] = TERMSPAWN("mindlock", "mosh", "mindlock");
+static const char *ncmpcppcmd[] = TERMSPAWN("ncmpcpp", "ncmpcpp");
+
+static const char *firefoxcmd[] = {"firefox", NULL };
+static const char *delugecmd[] = {"deluge", NULL };
+
+static const char *dmesgcmd[] = TERMSPAWN("dmesg", "dmesg-lessf");
+static const char *htopcmd[] = TERMSPAWN("htop", "htop");
+
+static Key keys[] = {
+	/* modifier                     key        function             argument */
+	{ MODKEY,                       XK_p,      spawn,               {.v = dmenucmd } },
+	{ MODKEY|ShiftMask,             XK_Return, spawn,               {.v = termcmd } },
+	{ MODKEY,                       XK_b,      togglebar,           {0} },
+	{ MODKEY,                       XK_j,      focusstack,          {.i = +1 } },
+	{ MODKEY,                       XK_k,      focusstack,          {.i = -1 } },
+	{ MODKEY,                       XK_i,      incnmaster,          {.i = +1 } },
+	{ MODKEY,                       XK_d,      incnmaster,          {.i = -1 } },
+	{ MODKEY,                       XK_h,      setmfact,            {.f = -0.05} },
+	{ MODKEY,                       XK_l,      setmfact,            {.f = +0.05} },
+	{ MODKEY,                       XK_Return, zoom,                {0} },
+	{ MODKEY,                       XK_Tab,    view,                {0} },
+	{ MODKEY|ShiftMask,             XK_c,      killclient,          {0} },
+	{ MODKEY,                       XK_f,      setlayout,           {.v = &layouts[0]} },
+	{ MODKEY,                       XK_t,      setlayout,           {.v = &layouts[1]} },
+	{ MODKEY,                       XK_m,      setlayout,           {.v = &layouts[2]} },
+	{ MODKEY,                       XK_space,  setlayout,           {0} },
+	{ MODKEY|ShiftMask,             XK_space,  togglefloating,      {0} },
+	{ MODKEY,                       XK_0,      view,                {.ui = ~0 } },
+	{ MODKEY|ShiftMask,             XK_0,      tag,                 {.ui = ~0 } },
+	{ MODKEY,                       XK_comma,  focusmon,            {.i = -1 } },
+	{ MODKEY,                       XK_period, focusmon,            {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_comma,  tagmon,              {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_period, tagmon,              {.i = +1 } },
+	TAGKEYS(                        XK_1,                           0)
+	TAGKEYS(                        XK_2,                           1)
+	TAGKEYS(                        XK_3,                           2)
+	TAGKEYS(                        XK_4,                           3)
+	TAGKEYS(                        XK_5,                           4)
+	{ MODKEY|ShiftMask,             XK_q,      quit,                {0} },
+	{ MODKEY|ControlMask|ShiftMask, XK_h,      togglehorizontalmax, {0} },
+	{ MODKEY|ControlMask|ShiftMask, XK_l,      togglehorizontalmax, {0} },
+	{ MODKEY|ControlMask|ShiftMask, XK_j,      toggleverticalmax,   {0} },
+	{ MODKEY|ControlMask|ShiftMask, XK_k,      toggleverticalmax,   {0} },
+	{ MODKEY|ControlMask,           XK_m,      togglemaximize,      {0} },
+
+	/*                                                              name        class      spawn */
+	RUNORRAISE(                     XK_a,                           "mindlock", NULL,      mindlockcmd),
+	RUNORRAISE(                     XK_n,                           "ncmpcpp",  NULL,      ncmpcppcmd),
+	RUNORRAISE(                     XK_f,                           NULL,       "Firefox", firefoxcmd),
+	RUNORRAISE(                     XK_d,                           NULL,       "Deluge",  delugecmd),
+	RUNORRAISE(                     XK_s,                           "dmesg",    NULL,      dmesgcmd),
+	RUNORRAISE(                     XK_z,                           "htop",     NULL,      htopcmd),
+};
+
+/* button definitions */
+/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
+static Button buttons[] = {
+	/* click                event mask      button          function        argument */
+	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
+	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
+	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
+	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
+	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
+	{ ClkTagBar,            0,              Button1,        view,           {0} },
+	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
+	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
+	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
+};
